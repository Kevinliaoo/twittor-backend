{
  "swagger": "2.0",
  "info": {
    "description": "Twittor is a social media clon of Twitter.",
    "version": "1.0.0",
    "title": "Twittor",
    "contact": {
      "email": "liaok0082@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3002",
  "basePath": "/api",
  "tags": [
    {
      "name": "posts",
      "description": "User's posts"
    },
    {
      "name": "auth",
      "description": "User authentucation information"
    },
    {
      "name": "users",
      "description": "Twittor user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/posts": {
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Create a new post",
        "description": "Create a new post.",
        "operationId": "createPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Post information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/posts/{uid}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get all posts of a user",
        "description": "Get all posts of a user",
        "operationId": "getPosts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "ID of the posting user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/posts/postId/{postId}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get a post by ID",
        "description": "Get a post by ID",
        "operationId": "getPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "description": "_id of the post to get",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/posts/like/{postId}/{liker}": {
      "patch": {
        "tags": [
          "posts"
        ],
        "summary": "Like a post",
        "description": "Like a post adding user's _id to post's likes array",
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "description": "_id of the post to like",
            "required": true
          },
          {
            "in": "path",
            "name": "liker",
            "description": "_id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/posts/unlike/{postId}/{liker}": {
      "patch": {
        "tags": [
          "posts"
        ],
        "summary": "Unlike a post",
        "description": "Unlike a post removing user's id from post's likes array",
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "description": "_id of the post to unlike",
            "required": true
          },
          {
            "in": "path",
            "name": "liker",
            "description": "_id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create user",
        "description": "Register a new user to Twittor.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "New user information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update user",
        "description": "Edit user information",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "New data",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "components": {
          "securityschemes": {
            "bearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
          }
        }
      }
    },
    "/users/follow/{id}": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Follow a user",
        "description": "Follows a user by adding follower's id to followed user's followers list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to follow",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "uid",
            "description": "ID of the follower user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/unfollow/{id}": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Unfollow a user",
        "description": "Unfollows a user by removing follower's id from followed user's followers list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the user to unfollow",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "uid",
            "description": "ID of the unfollower user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by username",
        "description": "Get user by username",
        "operationId": "getUserByUsername",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/id/{uid}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by ID",
        "description": "Get user by ID",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "User _id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Login request",
        "description": "Logs the user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "body",
            "description": "The username for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "body",
            "description": "The password of the user for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Post": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "description": "Post's owner user ID"
        },
        "content": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "repeatPsw": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    }
  }
}